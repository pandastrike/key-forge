{
  "name": "testify",
  "version": "0.2.7",
  "description": "simple asynchronous testing using assertions of your choice",
  "main": "src/testify.coffee",
  "bin": {
    "testify": "bin/testify"
  },
  "files": [
    "src",
    "bin/",
    "README.md"
  ],
  "dependencies": {
    "coffee-script": ">=0.4.0",
    "colors": "0.6.x"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:automatthew/testify.git"
  },
  "author": {
    "name": "Matthew King",
    "email": "automatthew@gmail.com"
  },
  "license": "MIT",
  "readme": "# Testify\n\nSimple synchronous and asynchronous testing, using the assertions of your choice.\n\nWritten (and most easily used) in CoffeeScript.\n\n## Basic usage\n\n```.coffee\n\nTestify = require \"../src/testify\"\nassert = require \"assert\"\n\nTestify.test \"straightforward synchronous testing\", (context) ->\n\n  context.test \"arithmetic\", ->\n    assert.equal (2 + 2), 4\n\n  context.test \"strings\", ->\n    assert.equal \"foo\".toUpperCase(), \"FOO\"\n\n  context.test \"error handling\", ->\n    error = new Error \"I failed.\"\n    assert.ifError(error)\n\n```\n\nOutput:\n\n![basic usage output](https://raw.github.com/automatthew/testify/documentation/doc/basic_usage.png)\n\n\n## Asynchronous usage\n\n```.coffee\n\nsome_async_call = (callback) ->\n  process.nextTick ->\n    callback null, \"pie\"\n\nanother_async_call = (input, callback) ->\n  process.nextTick ->\n    callback null, [\"bacon\", \"cheese\", \"pie\"]\n\nTestify.test \"a suite of tests\", (context) ->\n\n  # When you need to test the results of an asynchronous function,\n  # give context.test() a function that takes an argument.  You can\n  # then use that argument as a new context for nesting tests.\n  context.test \"testing something asynchronous\", (context) ->\n\n    some_async_call (error, result1) ->\n\n      # If you give context.test() a function that takes no arguments,\n      # the test is required to be synchronous, and considered to have\n      # passed if the function runs without throwing an error.\n      context.test \"result makes me happy\", ->\n        assert.ifError(error)\n        assert.equal(result1, \"pie\")\n\n      context.test \"a nested asynchronous test\", (context) ->\n\n        another_async_call result1,  (error, result2) ->\n\n          context.test \"result makes me deeply happy\", ->\n            assert.ifError(error)\n            assert.deepEqual result2, [\"bacon\", \"cheese\", \"pie\"]\n\n      context.test \"shortcut for passing an async test\", (context) ->\n        process.nextTick ->\n          # you can call context.pass() instead of using a synchronous test\n          context.pass()\n\n      context.test \"shortcut for failing an async test\", (context) ->\n        process.nextTick ->\n          context.fail(\"I just couldn't go on\")\n\n```\n\nOutput:\n\n![async usage output](https://raw.github.com/automatthew/testify/documentation/doc/async_usage.png)\n\nRun your test files with the `coffee` executable, or by requiring them, or using `bin/testify [--color]`.\n\n    coffee path/to/test.coffee\n    bin/testify -c path/to/test.coffee\n\n## Examples\n\n[Tests for Shred, an HTTP client](https://github.com/automatthew/shred/blob/master/test/shred_test.coffee)\n\nYou can also use test nesting with entirely synchronous work, as a way to structure the\ntest results:\n\n[Shred's header processing test](https://github.com/automatthew/shred/blob/master/test/headers_test.coffee)\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "testify@0.2.7",
  "dist": {
    "shasum": "4d9e4a9d0ddc90ca4786bc824a41b6ac25cafa6a"
  },
  "_from": "testify@",
  "_resolved": "https://registry.npmjs.org/testify/-/testify-0.2.7.tgz"
}
